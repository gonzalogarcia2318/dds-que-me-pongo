// Explicación/Aclaraciones

// Pseudocodigo 

class Prenda 
	TipoPrenda tipo 
	Material material
	Color color
	Color colorSecundario // opcional

	Double temperaturaMaxima // maxima temperatura para usar una prenda

	public Prenda(TipoPrenda tipo, Material material, Color color, Double temperaturaMaxima)
		this.tipo = tipo
		....

	public Prenda(TipoPrenda tipo, Material material, Color color, Color colorSecundario, Double temperaturaMaxima)
		this.tipo = tipo
		...
		this.colorSecundario = colorSecundario

class TipoPrenda
	String nombre
	Categoria categoria

enum Categoria
	PARTE_SUPERIOR, PARTE_INFERIOR, CALZADO, ACCESORIOS

class Atuendo
	Prenda parteSuperior
	Prenda parteInferior
	Prenda calzado
	List<Prenda> accesorios

class Material
	TipoMaterial tipoMaterial
	Trama trama

enum TipoMaterial
	ALGODON, JEAN, CUERO

enum Trama
	LISA, RAYADA, CON_LUNARES, A_CUADROS, ESTAMPADO

// Clase Color para manejar los colores en rgb (Correcion 1º iteracion)
class Color
	Integer r
	Integer g
	Integer b


// Borrador: builder de Prenda

class Borrador 
	TipoPrenda tipo 
	Material material
	Color color
	Color colorSecundario // opcional

	// devuelve this para interfaz fluida
	public Borrador especificarTipoPrenda(TipoPrenda tipo)
		this.tipo = tipo

	public Borrador especificarMaterial(Material material)
		this.material = material

	public Borrador especificarColor(Color color)
	this.color = color;

	public Borrador especificarColorSecundario(Color colorSecundario)
		this.colorSecundario = colorSecundario

	public Prenda crearPrenda()
		return new Prenda(this.tipo, this.material, this.color, this.colorSecundario)


class Uniforme
	Prenda parteSuperior
	Prenda parteInferior
	Prenda calzado


abstract class Sastre

	public Uniforme fabricarUniforme(){
		return new Uniforme(
			this.fabricarParteSuperior,
			this.fabricarParteInferior,
			this.fabricarCalzado)
	}

	protected abstract fabricarParteSuperior();

	protected abstract fabricarParteInferior();

	protected abstract fabricarCalzado();

class SastreSanJuan extends Sastre
	
	public Prenda fabricarParteSuperior(){
		... // crear prenda a traves de borrador
		return borrador.crearPrenda()
	}


	public Prenda fabricarParteInferior(){
		... // crear prenda a traves de borrador
		return borrador.crearPrenda()
	}


	public Prenda fabricarCalzado(){
		... // crear prenda a traves de borrador
		return borrador.crearPrenda()
	}

// Se pueden ir agregando Sastres segun instituciones

class SastreJohnson extends Sastre
	
	public Prenda fabricarParteSuperior()

	public Prenda fabricarParteInferior()

	public Prenda fabricarCalzado()


// Recomendador de atuendos - Cuarta Iteracion

class RecomendadorAtuendos 
	
	public Atuendo sugerirAtuendo()
		// sugerira un atuendo segun las condiciones climaticas


class CondicionesClimaticas 
	Double temperatura
	Double probabilidadLluvia


interface ServicioClima
	public CondicionesClimaticas obtenerCondicionesClimaticas()

class ServicioClimaAccuWeatherAPI implements IServicioClima
	
	String ciudad
	AccuWeatherAPI climaAPI

	// Inyecto dependencia para poder testear
	public ServicioClimaAccuWeatherAPI(String ciudad, AccuWeatherAPI api)
		this.ciudad = ciudad
		this.climaAPI = api

	public CondicionesClimaticas obtenerCondicionesClimaticas()
		response = climaAPI.getWeather(this.ciudad)
		return this.parseDataToCondicionesClimaticas(response)

	private CondicionesClimaticas parseDataToCondicionesClimaticas(List<Map<String, Object> accuWeatherData)
		CondicionesClimaticas condicionesClimaticas = new CondicionesClimaticas()
		// agarra cada atributo del clima provisto por AccuWeather y lo pasa a 
		// CondicionesClimaticas
		return condicionesClimaticas 


// Guardarropas - Quinta Iteracion

abstract class Guardarropas
	List<Usuario> usuarios
	List<Prenda> prendas

	List<ModificacionGuardarropas> modificacionesPropuestas

	List<ModificacionGuardarropas> historialModificaciones

	public proponerModificacion(ModificacionGuardarropas modificacion)
		this.modificacionesPropuestas.add(modificacion)

	public aceptarModificacion(ModificacionGuardarropas modificacion)
		modificacion.ejecutar(this)

	public rechazarModificacion(ModificacionGuardarropas modificacion)
		this.modificacionesPropuestas.remove(modificacion)

	public deshacerModificacion(ModificacionGuardarropas modificacion)
		modificacion.deshacer(this)


class GuardarropasViajes extends Guardarropas
	List<Prenda> prendas

class GuardarropasEntrecasa extends Guardarropas
	List<Prenda> prendas


class Usuario
	List<Guardarropa> guardarropas


interface ModificacionGuardarropas
	
	ejecutar(Guardarropas guardarropas)

	deshacer(Guardarropas guardarropas)


class AgregarPrenda implements ModificacionGuardarropas

	Prenda prenda

	ejecutar(Guardarropas guardarropas)
		guardarropas.agregarPrenda(this.prenda)

	deshacer(Guardarropas guardarropas)
		guardarropas.eliminarPrenda(this.prenda)


class SacarPrenda implements ModificacionGuardarropas

	Prenda prenda

	ejecutar(Guardarropas guardarropas)
		guardarropas.eliminarPrenda(this.prenda)

	deshacer(Guardarropas guardarropas)
		guardarropas.agregarPrenda(this.prenda)



// Alertas Meteorologias - Sexta Iteracion

class Usuario

	// Se agrega:
	Atuendo sugerenciaDiaria
	List<AlertaMeteorologicaObserver> alertasObservers

	List<Notificador> notificadores;

	public void agregarAlertaObserver(AlertaMeteorologicaObserver observer){
		observer.setUsuario(this)
		this.alertasObservers.add(observer);
	}

	public void notificarAlerta(AlertaMeteorologica alerta){
		notificadores.forEach(n -> n.notificar(this, alerta.descripcion))
	}

	public void actualizarSugerenciaDiaria(AlertaMeteorologica alerta){
		this.sugerenciaDiaria = this.recomendadorAtuendos.sugerirAtuendoPara(alerta.clima);
	}




class AlertaMeteorologica
	CondicionesClimaticas clima
	TipoAlerta tipo
	String descripcion
	// TipoNotificacion tipoNotificacion Depende de la alerta o de config de usuario?

enum TipoAlerta
	TORMENTA, GRANIZO

enum TipoNotificacion
	MAIL, NOTIFICACION

interface ServicioClima
	public CondicionesClimaticas obtenerCondicionesClimaticas()
	public List<AlertaMeteorologica> obtenerUltimasAlertas()
	public void actualizarAlertas()


// ServicioClima tendria que ser clase abstracta para manejar observers desde ahi?
// O esta bien que lo haga ServicioClimaAccuWeatherAPI ?

class ServicioClimaAccuWeatherAPI implements ServicioClima
	
	List<AlertaMeteorologicaObserver> observers;

	List<AlertaMeteorologica> alertas;

	public void actualizarAlertas(){
		AlertaMeteorologica alerta = this.obtenerAlertaMeteorologica()
		this.alertas.add(alerta)
		this.observers.forEach(observer -> observer.alertaMeteorologica(alerta))
	}

	private AlertaMeteorologica obtenerAlertaMeteorologica()
		response = climaAPI.getAlertas(this.ciudad)
		return this.parseDataToAlerta(response)

	private AlertaMeteorologica parseDataToAlerta(Map<String, List<String> data){
		AlertaMeteorologica alerta = new AlertaMeteorologica()
		// Operaciones para parsear
		//
		return alerta;
	}

	public List<AlertaMeteorologica> obtenerUltimasAlertas(){
		return this.alertas;
	}


// interface AlertaMeteorologicaObserver
//	public alertaMeteorologica(alerta)

// Hago AlertaMeteorologicaObserver clase abstracta para notificar siempre
// que surgio una alerta

abstract class AlertaMeteorologicaObserver 

	Usuario usuario

	public alertaMeteorologica(alerta){
		this.notificarAlerta(alerta);
	}

	private notificarAlerta(alerta){
		usuario.notificar(alerta) // Mandar mail o notificacion
	}


class SugerenciaObserver extends AlertaMeteorologicaObserver

	public alertaMeteorologica(alerta) { 
		super(alerta);
		usuario.actualizarSugerenciaDiaria(alerta)
	}

class TormentaObserver extends AlertaMeteorologicaObserver

	public alertaMeteorologica(alerta) { 
		super(alerta);
		// Ya se envia la alerta en el super, hacer algo mas? 
	}

class GranizoObserver extends AlertaMeteorologicaObserver

	public alertaMeteorologica(alerta) { 
		super(alerta);
		// Ya se envia la alerta en el super, hacer algo mas? 
	}



interface Notificador
	public void notificar(Usuario usuario, AlertaMeteorologica alerta);

class NotificacionPorPantalla implements Notificador

	private NotificacionService notificationService;
	
	public void notificar(Usuario usuario, AlertaMeteorologica alerta){
		notificationService.notify(alerta.descripcion);
	}


class NotificacionPorMail implements Notificador

	private MailSender mailSender;
	
	public void notificar(Usuario usuario, AlertaMeteorologica alerta){
		mailSender.send(usuario.email, alerta.descripcion);
	}
	