// Explicación/Aclaraciones

// Pseudocodigo 

class Prenda 
	TipoPrenda tipo 
	Material material
	Color color
	Color colorSecundario // opcional

	Double temperaturaMaxima // maxima temperatura para usar una prenda

	public Prenda(TipoPrenda tipo, Material material, Color color, Double temperaturaMaxima)
		this.tipo = tipo
		....

	public Prenda(TipoPrenda tipo, Material material, Color color, Color colorSecundario, Double temperaturaMaxima)
		this.tipo = tipo
		...
		this.colorSecundario = colorSecundario

class TipoPrenda
	String nombre
	Categoria categoria

enum Categoria
	PARTE_SUPERIOR, PARTE_INFERIOR, CALZADO, ACCESORIOS

class Atuendo
	Prenda parteSuperior
	Prenda parteInferior
	Prenda calzado
	List<Prenda> accesorios

class Material
	TipoMaterial tipoMaterial
	Trama trama

enum TipoMaterial
	ALGODON, JEAN, CUERO

enum Trama
	LISA, RAYADA, CON_LUNARES, A_CUADROS, ESTAMPADO

// Clase Color para manejar los colores en rgb (Correcion 1º iteracion)
class Color
	Integer r
	Integer g
	Integer b


// Borrador: builder de Prenda

class Borrador 
	TipoPrenda tipo 
	Material material
	Color color
	Color colorSecundario // opcional

	// devuelve this para interfaz fluida
	public Borrador especificarTipoPrenda(TipoPrenda tipo)
		this.tipo = tipo

	public Borrador especificarMaterial(Material material)
		this.material = material

	public Borrador especificarColor(Color color)
	this.color = color;

	public Borrador especificarColorSecundario(Color colorSecundario)
		this.colorSecundario = colorSecundario

	public Prenda crearPrenda()
		return new Prenda(this.tipo, this.material, this.color, this.colorSecundario)


class Uniforme
	Prenda parteSuperior
	Prenda parteInferior
	Prenda calzado


abstract class Sastre

	public Uniforme fabricarUniforme(){
		return new Uniforme(
			this.fabricarParteSuperior,
			this.fabricarParteInferior,
			this.fabricarCalzado)
	}

	protected abstract fabricarParteSuperior();

	protected abstract fabricarParteInferior();

	protected abstract fabricarCalzado();

class SastreSanJuan extends Sastre
	
	public Prenda fabricarParteSuperior(){
		... // crear prenda a traves de borrador
		return borrador.crearPrenda()
	}


	public Prenda fabricarParteInferior(){
		... // crear prenda a traves de borrador
		return borrador.crearPrenda()
	}


	public Prenda fabricarCalzado(){
		... // crear prenda a traves de borrador
		return borrador.crearPrenda()
	}

// Se pueden ir agregando Sastres segun instituciones

class SastreJohnson extends Sastre
	
	public Prenda fabricarParteSuperior()

	public Prenda fabricarParteInferior()

	public Prenda fabricarCalzado()


// Recomendador de atuendos - Cuarta Iteracion

class RecomendadorAtuendos 
	
	public Atuendo sugerirAtuendo()
		// sugerira un atuendo segun las condiciones climaticas


class CondicionesClimaticas 
	Double temperatura
	Double probabilidadLluvia


interface ServicioClima
	public CondicionesClimaticas obtenerCondicionesClimaticas()

class ServicioClimaAccuWeatherAPI implements IServicioClima
	
	String ciudad
	AccuWeatherAPI climaAPI

	// Inyecto dependencia para poder testear
	public ServicioClimaAccuWeatherAPI(String ciudad, AccuWeatherAPI api)
		this.ciudad = ciudad
		this.climaAPI = api

	public CondicionesClimaticas obtenerCondicionesClimaticas()
		response = climaAPI.getWeather(this.ciudad)
		return this.parseDataToCondicionesClimaticas(response)

	private CondicionesClimaticas parseDataToCondicionesClimaticas(List<Map<String, Object> accuWeatherData)
		CondicionesClimaticas condicionesClimaticas = new CondicionesClimaticas()
		// agarra cada atributo del clima provisto por AccuWeather y lo pasa a 
		// CondicionesClimaticas
		return condicionesClimaticas 


// Guardarropas - Quinta Iteracion

abstract class Guardarropas
	List<Usuario> usuarios
	List<Prenda> prendas

	List<ModificacionGuardarropas> modificacionesPropuestas

	List<ModificacionGuardarropas> historialModificaciones

	public proponerModificacion(ModificacionGuardarropas modificacion)
		this.modificacionesPropuestas.add(modificacion)

	public aceptarModificacion(ModificacionGuardarropas modificacion)
		modificacion.ejecutar(this)

	public rechazarModificacion(ModificacionGuardarropas modificacion)
		this.modificacionesPropuestas.remove(modificacion)

	public deshacerModificacion(ModificacionGuardarropas modificacion)
		modificacion.deshacer(this)


class GuardarropasViajes extends Guardarropas
	List<Prenda> prendas

class GuardarropasEntrecasa extends Guardarropas
	List<Prenda> prendas


class Usuario
	List<Guardarropa> guardarropas


interface ModificacionGuardarropas
	
	ejecutar(Guardarropas guardarropas)

	deshacer(Guardarropas guardarropas)


class AgregarPrenda implements ModificacionGuardarropas

	Prenda prenda

	ejecutar(Guardarropas guardarropas)
		guardarropas.agregarPrenda(this.prenda)

	deshacer(Guardarropas guardarropas)
		guardarropas.eliminarPrenda(this.prenda)


class SacarPrenda implements ModificacionGuardarropas

	Prenda prenda

	ejecutar(Guardarropas guardarropas)
		guardarropas.eliminarPrenda(this.prenda)

	deshacer(Guardarropas guardarropas)
		guardarropas.agregarPrenda(this.prenda)



// Alertas Meteorologias - Sexta Iteracion

class Usuario

	// Se agrega:
	Atuendo sugerenciaDiaria;
	List<AlertaMeteorologicaObserver> alertasObservers;

	public void agregarAlertaObserver(AlertaMeteorologicaObserver observer){
		this.alertasObservers.add(observer);
	}

	public void hayAlertas(List<AlertaMeteorologica> alertas){
		this.alertasObservers.forEach(observer -> observer.hayAlertas(this, alertas))
	}

	public void actualizarSugerenciaDiaria(AlertaMeteorologica alerta){
		this.sugerenciaDiaria = this.recomendadorAtuendos.sugerirAtuendoPara(alerta.clima);
	}

	public void sugerenciaDiaria(){
		this.sugerenciaDiaria = this.recomendadorAtuendos.sugerirAtuendo(guardarropas);
	}


class AlertaMeteorologica
	CondicionesClimaticas clima
	TipoAlerta tipo
	String descripcion

enum TipoAlerta
	TORMENTA, GRANIZO

interface ServicioClima
	public CondicionesClimaticas obtenerCondicionesClimaticas()
	public List<AlertaMeteorologica> obtenerAlertas()


class RepositorioAlertasMeteorologicas 

	List<AlertaMeteorologica> alertas;

	ServicioClima servicioClima; // para inyectar 

	// Este metodo podria estar en otro objeto TareaActualizarAlertas por ejemplo
	public void actualizarAlertas(){
		this.alertas = this.servicioClima.obtenerAlertas()

		RepositorioUsuarios.getInstance().getUsuarios().forEach(usuario -> {
			usuario.hayAlertas(this.alertas);
		})
		
	}



interface AlertaMeteorologicaObserver 
	public hayAlertas(Usuario usuario, List<AlertaMeteorologica> alertas);
	// tambien podria dividir las alertas en varios metodos:
	// public hayTormenta, hayGranizo
	// si hago eso, cada observer va a hacer algo en el metodo que quiera
	// si hago hayAlertas, se tendria que fijar que tipo de alerta llega
	// para ver si hacer algo o no

class SugerenciaObserver extends AlertaMeteorologicaObserver

	public hayAlertas(Usuario usuario, List<AlertaMeteorologica> alertas) { 
		usuario.actualizarSugerenciaDiaria(alertas)
	}

class NotificadorTormentaObserver extends AlertaMeteorologicaObserver

	NotificationService notificationService;

	public hayAlertas(Usuario usuario, List<AlertaMeteorologica> alertas) { 
		this.notificationService.notify("Hay tormenta! Lleva paraguas")
	}

class NotificadorGranizoObserver extends AlertaMeteorologicaObserver

	NotificationService notificationService;

	public hayAlertas(Usuario usuario, List<AlertaMeteorologica> alertas) { 
		this.notificationService.notify("Hay granizo! Evita salir en auto")
	}


// Para requerimiento:
// Como usuarie de QueMePongo quiero poder recibir un mail avisándome 
// si se generó algún alerta meteorológico y cuál
class NotificadorAlertaObserver extends AlertaMeteorologicaObserver

	MailSender mailSender;

	public hayAlertas(Usuario usuario, List<AlertaMeteorologica> alertas) { 
		this.mailSender.send(usuario.getEmail(), "Nueva alerta meteorologica...")
	}


// El usuario puede elegir que eventos prestar atencion, por ejemplo:
usuario.agregarAlertaObserver(new SugerenciaObserver())
usuario.agregarAlertaObserver(new NotificadorTormentaObserver())


// Se necesita el repositorio porque dice que una persona va a disparar
// la accion de actualizar la sugerencia de todos los usuarios
class RepositorioUsuarios 
	List<Usuario> usuarios

	// A futuro esto tendria que estar en otra clase porque no es responsabilidad
	// del repo hacer cosas, solamente tiene que tener muchas instancias de un objeto
	// y puede devolverlas todas o segun algun criterio/filtro.
	// Por ej: podria estar en una clase TareaAsginacionDiaria / TareaSugerenciaDiaria
	public void actualizarSugerenciasDiarias(){
		this.usuarios.forEach(usuario -> usuario.sugerenciaDiaria())
	}


// Separando la tarea del repositorio (Tendria que ser asi)
class TareaSugerenciaDiaria
	
	public void enviarSugerenciasDiarias(){
		RepositorioUsuarios.getInstance().getUsuarios().forEach(usuario -> {
			usuario.sugerenciaDiaria()
		})
	}


class ServicioClimaAccuWeatherAPI implements ServicioClima

	private List<AlertaMeteorologica> obtenerAlertas()
		response = climaAPI.getAlertas(this.ciudad)
		return this.parseDataToAlerta(response)

	private List<AlertaMeteorologica> parseDataToAlerta(Map<String, List<String> data){
		List<AlertaMeteorologica> alertas;
		// Operaciones para parsear
		//
		return alertas;
	}